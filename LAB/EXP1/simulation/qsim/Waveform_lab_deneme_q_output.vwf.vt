// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/01/2022 12:58:22"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          datapath_design
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module datapath_design_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [2:0] alu_control;
reg clock;
reg [3:0] Input_Data;
reg mux_select;
reg mux_select_alu;
reg mux_select_r1;
reg PS_Acc;
reg reset;
reg RL_Q;
// wires                                               
wire CO;
wire N;
wire [3:0] output_Q;
wire OVF;
wire [3:0] R1;
wire Z;

// assign statements (if any)                          
datapath_design i1 (
// port map - connection between master ports and signals/registers   
	.alu_control(alu_control),
	.clock(clock),
	.CO(CO),
	.Input_Data(Input_Data),
	.mux_select(mux_select),
	.mux_select_alu(mux_select_alu),
	.mux_select_r1(mux_select_r1),
	.N(N),
	.output_Q(output_Q),
	.OVF(OVF),
	.PS_Acc(PS_Acc),
	.R1(R1),
	.reset(reset),
	.RL_Q(RL_Q),
	.Z(Z)
);
initial 
begin 
#1000000 $finish;
end 
// alu_control[ 2 ]
initial
begin
	alu_control[2] = 1'b0;
end 
// alu_control[ 1 ]
initial
begin
	alu_control[1] = 1'b0;
end 
// alu_control[ 0 ]
initial
begin
	alu_control[0] = 1'b0;
end 

// clock
initial
begin
	repeat(12)
	begin
		clock = 1'b0;
		clock = #40000 1'b1;
		# 40000;
	end
	clock = 1'b0;
end 
// Input_Data[ 3 ]
initial
begin
	Input_Data[3] = 1'b0;
end 
// Input_Data[ 2 ]
initial
begin
	Input_Data[2] = 1'b1;
end 
// Input_Data[ 1 ]
initial
begin
	Input_Data[1] = 1'b0;
end 
// Input_Data[ 0 ]
initial
begin
	Input_Data[0] = 1'b0;
end 

// mux_select
initial
begin
	mux_select = 1'b0;
	mux_select = #80000 1'b1;
	mux_select = #80000 1'b0;
end 

// PS_Acc
initial
begin
	PS_Acc = 1'b0;
	PS_Acc = #80000 1'b1;
	PS_Acc = #80000 1'b0;
	PS_Acc = #640000 1'b1;
	PS_Acc = #80000 1'b0;
end 

// mux_select_r1
initial
begin
	mux_select_r1 = 1'b1;
end 

// mux_select_alu
initial
begin
	mux_select_alu = 1'b0;
end 

// RL_Q
initial
begin
	RL_Q = 1'b0;
	RL_Q = #640000 1'b1;
	RL_Q = #160000 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
end 
endmodule

